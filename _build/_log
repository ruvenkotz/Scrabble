### Starting build.
# Target: main.mli.depends, tags: { package(ounit2), package(yojson), debug, extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -modules main.mli > main.mli.depends # cached
# Target: main.cmi, tags: { package(ounit2), package(yojson), byte, compile, debug, extension:mli, file:main.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package yojson -o main.cmi main.mli # cached
# Target: main.ml.depends, tags: { package(ounit2), package(yojson), debug, extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -modules main.ml > main.ml.depends
# Target: bag.mli.depends, tags: { package(ounit2), package(yojson), debug, extension:mli, file:bag.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -modules bag.mli > bag.mli.depends # cached
# Target: bag.cmi, tags: { package(ounit2), package(yojson), byte, compile, debug, extension:mli, file:bag.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package yojson -o bag.cmi bag.mli # cached
# Target: board.mli.depends, tags: { package(ounit2), package(yojson), debug, extension:mli, file:board.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -modules board.mli > board.mli.depends # cached
# Target: board.cmi, tags: { package(ounit2), package(yojson), byte, compile, debug, extension:mli, file:board.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package yojson -o board.cmi board.mli # cached
# Target: hand.mli.depends, tags: { package(ounit2), package(yojson), debug, extension:mli, file:hand.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -modules hand.mli > hand.mli.depends # cached
# Target: hand.cmi, tags: { package(ounit2), package(yojson), byte, compile, debug, extension:mli, file:hand.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package yojson -o hand.cmi hand.mli # cached
# Target: main.cmo, tags: { package(ounit2), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package yojson -o main.cmo main.ml
# Target: bag.ml.depends, tags: { package(ounit2), package(yojson), debug, extension:ml, file:bag.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -modules bag.ml > bag.ml.depends # cached
# Target: bag.cmo, tags: { package(ounit2), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:bag.cmo, file:bag.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package yojson -o bag.cmo bag.ml # cached
# Target: board.ml.depends, tags: { package(ounit2), package(yojson), debug, extension:ml, file:board.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -modules board.ml > board.ml.depends # cached
# Target: board.cmo, tags: { package(ounit2), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:board.cmo, file:board.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package yojson -o board.cmo board.ml # cached
# Target: hand.ml.depends, tags: { package(ounit2), package(yojson), debug, extension:ml, file:hand.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package yojson -modules hand.ml > hand.ml.depends # cached
# Target: hand.cmo, tags: { package(ounit2), package(yojson), byte, compile, debug, extension:cmo, extension:ml, file:hand.cmo, file:hand.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package yojson -o hand.cmo hand.ml # cached
# Target: main.byte, tags: { package(ounit2), package(yojson), byte, debug, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -g -package ounit2 -package yojson bag.cmo board.cmo hand.cmo main.cmo -o main.byte
# Compilation successful.
